trigger:
  - master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'release'
  ImageName: 'kiranjagz/shapes-api:latest'

stages:
  - stage: 'build'
    displayName: 'build_and_test'
    jobs: 
    - job: 'build_and_test'
      steps:
      - task: DotNetCoreCLI@2
        displayName: 'dotnet restore'
        inputs:
          command: 'restore'
          feedsToUse: 'select'
          feedRestore: 'bobbi-force/bobbi-force'
          projects: '**/*.csproj'
          includeNuGetOrg: true

      - task: DotNetCoreCLI@2
        displayName: 'dotnet build $(buildConfiguration)'
        inputs:
          command: 'build'
          arguments: '--configuration $(buildConfiguration)'
          projects: 'src/Shapes.Api/Shapes.Api.csproj'
          
      - task: DotNetCoreCLI@2
        displayName: 'dotnet test'
        inputs:
          command: 'test'
          projects: 'src/Shapes.Test/Shapes.Test.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'dotnet publish'
        inputs:
         command: publish
         publishWebProjects: True
         arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
         zipAfterPublish: True

      # - task: PublishPipelineArtifact@1
      #   displayName: 'publish artificat'
      #   inputs:
      #    targetPath: '$(Build.ArtifactStagingDirectory)' 
      #    artifactName: 'ReleaseOutput'

  - stage: 'deploy_to_azure'
    displayName: 'deploy_to_azure'
    jobs:
    - job: 'deploy_to_azure'
      steps:
      - task: AzureWebApp@1
        inputs:
          azureSubscription: '77de49d2-0037-494f-8963-f6cfb8b21173'
          appType: 'webAppLinux'
          appName: 'MyShapesApi'
          package: '$(System.DefaultWorkingDirectory)/**/*.zip'

  # - stage: 'docker'
  #   displayName: 'build_and_push_docker_image'
  #   jobs:
  #   - job: 'build_and_push_docker_image'
  #     steps:
  #     - task: Docker@1     
  #       displayName: 'build docker image'
  #       inputs:
  #         containerregistrytype: 'Container Registry'
  #         dockerRegistryEndpoint: 'Docker Hub'
  #         command: 'Build an image'
  #         dockerFile: 'Dockerfile'
  #         arguments: '--build-arg PAT=$(System.AccessToken)'
  #         imageName: '$(ImageName)'
  #         includeLatestTag: true
  #         useDefaultContext: false
  #         buildContext: '.'

  #     - task: Docker@1
  #       displayName: 'push docker image'
  #       inputs:
  #         containerregistrytype: 'Container Registry'
  #         dockerRegistryEndpoint: 'Docker Hub'
  #         command: 'Push an image'
  #         imageName: '$(ImageName)'
  #         condition: and(succeeded())